/*
 * Design craft
 * This is a Design craft server.  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * CodecTransport
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-06-25T19:20:59.347Z")
public class CodecTransport   {
  /**
   * Gets or Sets codec
   */
  public enum CodecEnum {
    GSM("gsm"),
    
    OPUS("opus");

    private String value;

    CodecEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodecEnum fromValue(String text) {
      for (CodecEnum b : CodecEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("codec")
  private CodecEnum codec = null;

  /**
   * Gets or Sets transport
   */
  public enum TransportEnum {
    RTP("rtp"),
    
    SRTP("srtp"),
    
    ZRTP("zrtp");

    private String value;

    TransportEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransportEnum fromValue(String text) {
      for (TransportEnum b : TransportEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("transport")
  private TransportEnum transport = null;

  public CodecTransport codec(CodecEnum codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Get codec
   * @return codec
   **/
  @JsonProperty("codec")
  @ApiModelProperty(value = "")
  public CodecEnum getCodec() {
    return codec;
  }

  public void setCodec(CodecEnum codec) {
    this.codec = codec;
  }

  public CodecTransport transport(TransportEnum transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Get transport
   * @return transport
   **/
  @JsonProperty("transport")
  @ApiModelProperty(value = "")
  public TransportEnum getTransport() {
    return transport;
  }

  public void setTransport(TransportEnum transport) {
    this.transport = transport;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodecTransport codecTransport = (CodecTransport) o;
    return Objects.equals(this.codec, codecTransport.codec) &&
        Objects.equals(this.transport, codecTransport.transport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codec, transport);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodecTransport {\n");
    
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

